// Generated by CoffeeScript 1.7.1
(function() {
  var grasky;

  grasky = window.grasky != null ? window.grasky : window.grasky = {};

  grasky.LatticeLayout = (function() {
    var SPACING, getNodesPerRow, getPosition, getUpperCorner;

    function LatticeLayout() {}

    SPACING = 9;

    LatticeLayout.prototype.getLayout = function(nodeCount, edges) {
      var i, j, k, layer, nodesPerRow, positions, upperCorner, _i, _j, _k, _l;
      nodesPerRow = getNodesPerRow(nodeCount);
      upperCorner = getUpperCorner(nodesPerRow);
      positions = [];
      for (layer = _i = 0; 0 <= nodesPerRow ? _i < nodesPerRow : _i > nodesPerRow; layer = 0 <= nodesPerRow ? ++_i : --_i) {
        for (i = _j = 0; 0 <= layer ? _j <= layer : _j >= layer; i = 0 <= layer ? ++_j : --_j) {
          for (j = _k = 0; 0 <= layer ? _k <= layer : _k >= layer; j = 0 <= layer ? ++_k : --_k) {
            for (k = _l = 0; 0 <= layer ? _l <= layer : _l >= layer; k = 0 <= layer ? ++_l : --_l) {
              if (positions.length === nodeCount) {
                return positions;
              } else if (i === layer || j === layer || k === layer) {
                positions.push(getPosition(upperCorner, k, j, i));
              }
            }
          }
        }
      }
      return positions;
    };

    getNodesPerRow = function(count) {
      var i;
      i = 1;
      while (i * i * i < count) {
        i++;
      }
      return i;
    };

    getUpperCorner = function(nodesPerRow) {
      var displacement;
      displacement = -SPACING * (nodesPerRow - 1) / 2;
      return new THREE.Vector3(displacement, displacement, displacement);
    };

    getPosition = function(upperCorner, xIndex, yIndex, zIndex) {
      return new THREE.Vector3(xIndex, yIndex, zIndex).multiplyScalar(SPACING).add(upperCorner);
    };

    return LatticeLayout;

  })();

}).call(this);
