// Generated by CoffeeScript 1.7.1
(function() {
  var grasky;

  grasky = window.grasky != null ? window.grasky : window.grasky = {};

  grasky.LinkedDict = (function() {
    var LinkedList, mangle;

    function LinkedDict() {
      this.clear();
    }

    LinkedDict.prototype.clear = function() {
      this._dict = {};
      this._list = new LinkedList;
      return this._size = 0;
    };

    LinkedDict.prototype.put = function(key, value) {
      var node, oldValue;
      if (this.containsKey(key)) {
        node = this._dict[mangle(key)];
        oldValue = node.value;
        node.value = value;
        return oldValue;
      } else {
        node = this._list.createAndAddNode(key, value);
        this._dict[mangle(key)] = node;
        this._size++;
        return void 0;
      }
    };

    LinkedDict.prototype.get = function(key) {
      var _ref;
      return (_ref = this._dict[mangle(key)]) != null ? _ref.value : void 0;
    };

    LinkedDict.prototype.remove = function(key) {
      var node;
      if (this.containsKey(key)) {
        node = this._dict[mangle(key)];
        this._list.removeNode(node);
        delete this._dict[mangle(key)];
        this._size--;
        return node.value;
      } else {
        return void 0;
      }
    };

    LinkedDict.prototype.containsKey = function(key) {
      return this._dict.hasOwnProperty(mangle(key));
    };

    LinkedDict.prototype.size = function() {
      return this._size;
    };

    LinkedDict.prototype.isEmpty = function() {
      return this._size === 0;
    };

    LinkedDict.prototype.foreach = function(f) {
      return this._list.foreach(f);
    };

    LinkedDict.prototype.keys = function() {
      var keys;
      keys = [];
      this._list.foreach(function(value, key) {
        return keys.push(key);
      });
      return keys;
    };

    LinkedDict.prototype.values = function() {
      var values;
      values = [];
      this._list.foreach(function(value) {
        return values.push(value);
      });
      return values;
    };

    mangle = function(key) {
      return '~' + key;
    };

    LinkedList = (function() {
      function LinkedList() {
        this._start = {};
        this._end = {};
        this._start.next = this._end;
        this._end.prev = this._start;
      }

      LinkedList.prototype.foreach = function(f) {
        var curr;
        curr = this._start.next;
        while (curr !== this._end) {
          f(curr.value, curr.key);
          curr = curr.next;
        }
      };

      LinkedList.prototype.createAndAddNode = function(key, value) {
        var node;
        node = {
          key: key,
          value: value,
          prev: this._end.prev,
          next: this._end
        };
        this._end.prev.next = node;
        this._end.prev = node;
        return node;
      };

      LinkedList.prototype.removeNode = function(node) {
        node.prev.next = node.next;
        return node.next.prev = node.prev;
      };

      return LinkedList;

    })();

    return LinkedDict;

  })();

}).call(this);
