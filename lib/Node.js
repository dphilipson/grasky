// Generated by CoffeeScript 1.7.1
(function() {
  var grasky;

  grasky = window.grasky != null ? window.grasky : window.grasky = {};

  grasky.Node = (function() {
    var COLOR, SELECTION_COLOR, TEXT_COLOR, createText, ease;

    COLOR = 0xe0e0e0;

    SELECTION_COLOR = 0x170e6;

    TEXT_COLOR = 0x000000;

    function Node(id, text, scene) {
      this.id = id;
      this.text = text;
      this.selected = false;
      this._flightStart = new THREE.Vector3;
      this._flightEnd = new THREE.Vector3;
      this._flightProgress = 1;
      this._edges = [];
      this.mesh = this._createSphere();
      this.mesh.node = this;
      scene.add(this.mesh);
      this._initializeLabel();
    }

    Node.prototype._createSphere = function() {
      var geometry, material;
      geometry = new THREE.SphereGeometry(0.5, 32, 32);
      material = new THREE.MeshLambertMaterial({
        color: COLOR
      });
      return new THREE.Mesh(geometry, material);
    };

    Node.prototype._initializeLabel = function() {
      this.label = createText(this.text);
      this.label.width = this._getWidth(this.label);
      this.label.position.set(-this.label.width / 2, -1.2, 0);
      return this.mesh.add(this.label);
    };

    createText = function(text) {
      var geometry, material;
      geometry = new THREE.TextGeometry(text, {
        size: 0.5,
        height: 0.05
      });
      material = new THREE.MeshBasicMaterial({
        color: TEXT_COLOR
      });
      return new THREE.Mesh(geometry, material);
    };

    Node.prototype._getWidth = function(mesh) {
      var boundingBox;
      mesh.geometry.computeBoundingBox();
      boundingBox = mesh.geometry.boundingBox;
      return boundingBox.max.x - boundingBox.min.x;
    };

    Node.prototype.setSelected = function(selected) {
      var color;
      this.selected = selected;
      color = selected ? SELECTION_COLOR : COLOR;
      return this.mesh.material.color.setHex(color);
    };

    Node.prototype.setPosition = function(x, y, z) {
      this._flightStart.set(x, y, z);
      this._flightEnd.set(x, y, z);
      this._flightProgress = 1;
      return this.mesh.position.set(x, y, z);
    };

    Node.prototype.setText = function(text) {
      if (text !== this.text) {
        this.text = text;
        this.mesh.remove(this.label);
        return this._initializeLabel();
      }
    };

    Node.prototype.setFlightTarget = function(x, y, z) {
      this._flightStart = this.mesh.position.clone();
      this._flightEnd = new THREE.Vector3(x, y, z);
      return this._flightProgress = 0;
    };

    Node.prototype.updateFlight = function(progress) {
      var t;
      if (this._flightProgress !== 1) {
        this._flightProgress = Math.min(1, this._flightProgress + progress);
        t = ease(this._flightProgress);
        return this.mesh.position.copy(this._flightStart).multiplyScalar(1 - t).add(this._flightEnd.clone().multiplyScalar(t));
      }
    };

    Node.prototype.dispose = function() {
      this.mesh.geometry.dispose();
      this.mesh.material.dispose();
      return this.mesh = null;
    };

    ease = function(t) {
      return 3 * t * t - 2 * t * t * t;
    };

    return Node;

  })();

}).call(this);
